package com.javarush.task.task20.task2026;

/* 
Алгоритмы-прямоугольники
*/
public class Solution {
    public static void main(String[] args) {



        byte[][] a2 = new byte[][]{
                {1, 1, 1, 1},
                {1, 1, 0, 0},
                {1, 0, 0, 0},
                {1, 0, 1, 1}
        };
        
        // Тестовые примеры        
        //        byte[][] a2 = new byte[][]{
        //                {1, 1, 0, 1},
        //        };
        
        //        byte[][] a2 = new byte[][]{
        //                {1,0,1},
        //                {1,0,1},
        //                {1,1,1},
        //                {1,0,1},
        //                {1,0,1},
        //        };


        int count2 = getRectangleCount(a2);
        System.out.println("count = " + count2 );
    }

    //Вспомогательная функция для просмотра массивов после итераций
    public static void printArray(byte[][] a){
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[i].length; j++) {
                System.out.print(a[i][j]+" ");
            }
            System.out.println();
        }
    }

    public static int getRectangleCount(byte[][] a) {
        // Создаем копию массива, чтобы делать модификации внутри массива, не изменяя оригинал
        byte[][] a_copy = a.clone();

        // Итоговое количество прямоугольников
        int count =0;
        //  Перебираем строки
        for (byte i=0;i<a_copy.length;i++){

            // Перебераем элементы строки
            for (int j = 0; j < a_copy[i].length; j++) {
                //Ширина прямоугольника ( количество единиц справа)
                int width = 0;
                // Длина прямоугольника (количество единиц снизу)
                int down = 0;

                // Если нашли элемент с 1
                if (a_copy[i][j]==1){
                    //Обнуляем этот элемент (для наглядности, можно убрать, не влияет на исполнение)
                    a_copy[i][j]=0;

                    // Находим ширину прямоугольника
                    while (true){
                        width+=1;
                        if ( (j+width)>= a_copy[i].length||a_copy[i][j+width]==0){
                            break;
                        } else {
                            // Если последующий элемент тоже является единицей, то зачитываем его в ширину
                            // и делаем его нулевым, чтобы при следующей итерации, он не считался как отдельный прямоугольник
                            a_copy[i][j+width]=0;
                        }
                    }

                    // Находим длину прямоугольника (насколько уходит вниз)
                    outerLoop:
                    while (true){

                        down++;
                        int next_row = i + down;
                        // Если ниже нету строк, то прерываем цикл ( и добавляем 1 к количеству прямоугольников)
                        if ( (next_row)>= a_copy.length){
                            break;
                        }
                        int count_in_next_row = 0;
                        // Перебираем нижнюю строку
                        for (int k = j; k <j+ width; k++) {

                            // Если первый элемент равен 0, то прямоугольник закончился и переходим к следующему элементу строки i
                            if (k==j){
                                if (a_copy[next_row][j]==0){
                                    break outerLoop;
                                }
                            }

                            // Если ширина прямоугольника больше 1 элемента, а в нижней строке первый элемент равен 1,
                            // а любой из последующих не равен 1, то мы нашли еще один прямоугольник
                            // Пример иллюстрирующий правило:
                            // {1, 1}
                            // {1, 0}
                            // В примере выше два прямоугольника горизонтальный и вертикальный.
                            if (a_copy[next_row][k]==0){

                                count++;
                                width = width - count_in_next_row;
                                break;
                            } else {
                                // Если последующий элемент тоже является единицей,
                                // то делаем его нулевым, чтобы при следующей итерации, он не считался как отдельный прямоугольник
                                count_in_next_row++;
                                a_copy[next_row][k]=0;
                            }
                        }
                    }
                    // Прибавляем к количеству прямоугольников 1
                    count++;
                }
            }

        }
    return count;
    }
}
